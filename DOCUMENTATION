Author: Travis Churchill
School: Oregon Institute of Technology
Course: CST238 - GUI

Discovery:

While I am pretty familiar with the Objective-C / Cocoa-Touch api, Cocoa is somewhat different.  For one, I do not have use of any of the UI-classes, and am limited to the NS-based methods.
I hope that classes such as NSView are similar enough to UIView that I will not have too much difficulty with the implementation.  

Analysis:
I plan to build using a split view

Architecture:


Synthesis:

Documentation of Process:

I had intended on using an Outline view for the left hand navigation, but building out the item hierarchy is proving to be difficult.  I may have to go with something simpler, such as a NSTableView or in the interest of time I may just use a series of buttons.  

I had to restart the project because I didn't understand the way nibs are wired into the app delegate.  It seems that the delegate really wants there to be a main window and menu. 
My efforts to remove them uncoupled something important.  I'm now going to pass a reference to the window to my custom window controller, so that my event handling is outside the app delegate. 

I finally rigged the buttons to work with the right callback to the window controller.  I'm going to set up a new view to deal with the widgets that live under each category.  

todo:  still have to figure out how the NSPathControl works.  I know how to deal with an NSSlider.  NSLevelIndicator is a bit of a mistery to me.  
Actually, I"m putting the NSPathControl object in the ListView nib.  

need to set a delegate for the NSTextField in the controller for that view.  

popup view needs to be wired into some kind of popup action

i will need to figure out how tables work, since that is one of the sections.  The tree view has that list model that me trouble.  I'll have to work out a better way to build that. 

The basic buttons got wired up without too much difficulty.  View sizing is looking like it's going to be a bit of a pain.  Apparently I need to write some logic to deal with that.  Perhaps make everything live inside a scroll view?  Anyway that's low priority, since the widgets themselves are the focus of this exercise.  
